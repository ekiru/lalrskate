#!/usr/bin/env winxed

// The G_0 from page 29 of "Practical Translators for LR(k) Languages".
// It's LR(0).

function main[main](argv) {
    load_bytecode('lalr.pbc');
    var grammar = new LALR.Grammar;

    grammar.add_nonterminal("S");
    grammar.add_nonterminal("E");
    grammar.add_nonterminal("A");
    grammar.add_nonterminal("B");
    grammar.add_terminal("a");
    grammar.add_terminal("b");
    grammar.add_terminal("c");
    grammar.add_terminal("d");

    grammar.start("S");

    grammar.add_rule("S", "E");

    grammar.add_rule("E", "a", "A");
    grammar.add_rule("A", "c", "A");
    grammar.add_rule("A", "d");

    grammar.add_rule("E", "b", "B");
    grammar.add_rule("B", "c", "B");
    grammar.add_rule("B", "d");

//    print(grammar.as_bnf_string());

    using LALR.Generator.build_CFSM;

    prettyprint(build_CFSM(grammar));
}

function prettyprint(dpda) {
    say ("digraph DPDA {");

    for (string state in dpda.states()) {
	string label;
	string beginning = substr(state, 0, 18);
	if (beginning == "__build_CFSM__ANON") {
	    label = "";
	} else {
	    label = state;
	}
	say("\t" + state + ' [label="' + label +  '", shape=box];');
    }
    say("");

    for (string state in dpda.states()) {
	for (var transition in dpda.transitions_from(state)) {
	    string to = transition.to();
	    string under = transition.symbol();
	    say("\t" + state + " -> " + to + '[label="' + under + '"];');
	}
    }
    say("}");

}
