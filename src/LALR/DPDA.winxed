namespace LALR {

namespace DPDA {

    function EPSILON() {
	return "__LALR__DPDA_EPSILON";
    }

}

class DPDA {
    var input;
    var stack;
    var states;
    var transitions;
    var start;

    function init[vtable]() {
	self.stack = [];
	self.states = {};
	self.transitions = {};
    }

    function BUILD(input[named]) {
	self.input = input;
    }

    function start(string start[optional], int has_start[opt_flag]) {
	if (has_start) {
	    self.expect_state(start);
	    self.start = start;
	}
	return self.start;
    }

    function states() {
	var result = [];
	for (string state in self.states) {
	    ${ push result, state };
	}
	return result;
    }

    function add_state(string name) {
	self.states[name] = 1;
	self.transitions[name] = [];
    }

    function add_state_if_not_present(string name) {
	if (!self.is_state(name))
	    self.add_state(name);
    }

    function is_state(string name) {
	return exists self.states[name];
    }

    function expect_state(string name) {
	if (!self.is_state(name)) {
	    throw "State " + name + " is not present in the automaton.";
	}
    }

    function add_transition_from(string from, var transition) {
	self.expect_state(from);
	self.expect_state(transition.to());
	${ push self.transitions[from], transition };
	string to = transition.to();
	string symbol = transition.symbol();
    }

    function transitions_from(string from) {
	self.expect_state(from);
	return self.transitions[from];
    }

    function is_state_adequate(string state) {
	self.expect_state(state);
	var transitions = self.transitions_from(state);
	int total = transitions;
	if (total == 1) {
	    return 1;
	} else {
	    for (var transition in transitions) {
		if (transition.is_hash_transition()) {
		    return 0;
		}
	    }
	}
	return 1;
    }

    function is_adequate() {
	int result = 1;
	for (string state in self.states) {
	    result = self.is_state_adequate(state);
	    if (!result)
		break;
	}
	return result;
    }

}

}