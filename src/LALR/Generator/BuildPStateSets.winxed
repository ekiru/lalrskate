namespace LALR {
namespace Generator {

    /* build_p_state_sets returns a hash of arrays of hashes mapping
       nonterminals in the grammar and the production number for those
       nonterminals to sets, represented as a hash, of states which
       have #_transitions for each production. */
    function build_p_state_sets(grammar, cfsm) {
	using LALR.Generator.BuildCFSM.hash_state_for;

	var sets = {};
	var p_symbols = {};
	for (string nonterminal in grammar.nonterminals()) {
	    sets[nonterminal] = [];
	    var productions = grammar.rule(nonterminal);
	    for (int i = 0; i < elements(productions); i++) {
		sets[nonterminal][i] = {};
		p_symbols[hash_state_for(nonterminal, i)] = [nonterminal, i];
	    }
	}

	for (string state in cfsm.states()) {
	    for (var transition in cfsm.transitions_from(state)) {
		if (transition instanceof LALR.DPDA.ReadTransition && exists p_symbols[transition.to()]) {
		    string nonterminal = p_symbols[transition.to()][0];
		    int i = p_symbols[transition.to()][1];
		    sets[nonterminal][i][state] = 1;
		}
	    }
	}

	return sets;
    }

}
}