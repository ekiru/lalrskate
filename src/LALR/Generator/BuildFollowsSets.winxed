namespace LALR {
namespace Generator {

    function build_follows_sets(int k, grammar, first) {
	using LALR.DPDA.EPSILON;
	if (k > 1) {
	    throw "Follow sets for k > 1 not yet implemented.";
	}
	var sets = [];
	sets[1] = {};
	
	int changed = 1;
	while (changed) {
	    changed = 0;
	    for (string nonterm in grammar.nonterminals()) {
		for (var production in grammar.rule(nonterm)) {
		    for (int i = 0; i < elements(production); i++) {
			if (grammar.is_nonterminal(production[i])) {
			    string A = production[i];
			    if (!exists sets[1][A]) {
				sets[1][A] = {};
			    }
			    int j = i + 1;
			    while (j < elements(production) && exists first[1][production[j]][EPSILON()]) {
				j++;
			    }
			    if (j == elements(production)) {
				if (!exists sets[1][nonterm])
				    sets[1][nonterm] = {};
				for (string symbol in sets[1][nonterm]) {
				    if (!exists sets[1][A][symbol]) {
					changed = 1;
					sets[1][A][symbol] = 1;
				    }
				}
			    }
			    if (i + 1 == elements(production))
				continue;
			    if (grammar.is_nonterminal(production[i + 1])) {
				for (string symbol in first[1][production[i + 1]]) {
				    if (!exists sets[1][A][symbol]) {
					changed = 1;
					sets[1][A][symbol] = 1;
				    }
				}
			    } else {
				if (!exists sets[1][A][production[i + 1]]) {
				    changed = 1;
				    sets[1][A][production[i + 1]] = 1;
				}
			    }
			}
		    }
		}
	    }
	}

	return sets;
    }

}
}