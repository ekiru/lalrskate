namespace LALR {
namespace Generator {

    function build_first_sets(int k, grammar) {
	using LALR.DPDA.EPSILON;
	if (k > 1) {
	    throw "First sets for k > 1 not yet implemented.";
	}

	var sets = [];
	sets[1] = {};
	
	int changed = 1;
	while (changed) {
	    changed = 0;

	    for (string nonterm in grammar.nonterminals()) {
		if (!exists sets[1][nonterm])
		    sets[1][nonterm] = {};
		for (var production in grammar.rule(nonterm)) {
		    if (elements(production) == 0) {
			if (!exists sets[1][nonterm][EPSILON()]) {
			    changed = 1;
			    sets[1][nonterm][EPSILON()] = 1;
			}
			continue;
		    }
		    int found_epsilon = 0;
		    do {
			string first = production[0];
			if (grammar.is_terminal(first)) {
			    if (!exists sets[1][nonterm][first]) {
				changed = 1;
				sets[1][nonterm][first] = 1;
			    }
			} else if (grammar.is_nonterminal(first)) {
			    for (string symbol in sets[1][first]) {
				if (symbol == EPSILON()) {
				    found_epsilon = 1;
				    production = clone(production);
				    var ignore;
				    ${ shift ignore, production };
				} else if (!exists sets[1][nonterm][symbol]) {
				    changed = 1;
				    sets[1][nonterm][symbol] = 1;
				}
			    }
			}
		    } while (production);
		}
	    }
	}

	return sets;
    }

}
}