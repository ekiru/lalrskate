namespace LALR {
namespace Generator {

    function eliminate_epsilon_transitions(dpda) {
	using LALR.DPDA.EPSILON;
	for (string state in dpda.states()) {
	    var symbols = {};
	    for (var transition in dpda.transitions_from(state)) {
		symbols[transition.symbol()] = transition.to();
	    }

	    for (int i = 0; i < elements(dpda.transitions_from(state)); i++) {
		var transitions = dpda.transitions_from(state);
		if (transitions[i] instanceof LALR.DPDA.ReadTransition && string(transitions[i].symbol()) == EPSILON()) {
		    string to = transitions[i].to();
		    delete transitions[i];
		    var state_stack = [to];
		    while (state_stack) {
			string eps_state;
			${ pop eps_state, state_stack };
			for (var transition in dpda.transitions_from(eps_state)) {
			    if (transition instanceof LALR.DPDA.ReadTransitions && string(transition.symbol()) == EPSILON()) {
				${ push state_stack, transition.to() };
			    } else {
				dpda.add_transition_from(state, transition);
			    }
			}
		    }
		}
	    }
	}
	
    }


}
}