namespace LALR {

class Generator {
    var grammar;
    var cfsm;
    var ntt;
    var p_state_sets;
    var first_sets;
    var follows_sets;
    var lookback_sets;

    function expect_grammar() {
	if (self.grammar == null)
	    throw "Grammar not set.";
    }
    function expect_cfsm() {
	if (self.cfsm == null)
	    throw "CFSM not set.";
    }
    function expect_ntt() {
	if (self.ntt == null)
	    throw "Nonterminal transition table not set.";
    }
    function expect_p_state_sets() {
	if (self.p_state_sets == null)
	    throw "P-state sets not set.";
    }

    function expect_first_sets() {
	if (self.first_sets == null)
	    throw "First state sets not set.";
    }

    function expect_follows_sets() {
	if (self.follows_sets == null)
	    throw "Follows state sets not set.";
    }

    function expect_lookback_sets() {
	if (self.lookback_sets == null)
	    throw "Lookback sets not set.";
    }


    function generate(grammar) {
	self.grammar = grammar;
	self.add_start_and_end();
	self.build_CFSM();
	self.eliminate_epsilon_transitions();
	self.build_nonterminal_transition_table();
	self.build_p_state_sets();
	if (!self.cfsm.is_adequate()) {
	    self.build_first_sets();
	    self.build_follows_sets();
	    self.build_simple_1_lookahead_sets();
	}
	if (!self.is_slr1()) {
	    throw "Grammar is not SLR(1).";
	}
	self.build_lookback_sets();
	self.add_lookahead();
	self.add_lookback();
	self.delete_transitions_under_nonterminals();
	self.explicitly_push_states();
	self.remove_unreachable_states();

	return self.cfsm;
    }

    function add_start_and_end() {
	using LALR.Generator.add_start_and_end;
	self.expect_grammar();
	add_start_and_end(self.grammar);
    }

    function build_CFSM() {
	using LALR.Generator.build_CFSM;
	self.expect_grammar();
	self.cfsm = build_CFSM(self.grammar);
    }

    function build_nonterminal_transition_table() {
	using LALR.Generator.build_nonterminal_transition_table;
	self.expect_grammar();
	self.expect_cfsm();
	self.ntt = build_nonterminal_transition_table(self.grammar, self.cfsm);
    }

    function build_p_state_sets() {
	using LALR.Generator.build_p_state_sets;
	self.expect_grammar();
	self.expect_cfsm();
	self.p_state_sets = build_p_state_sets(self.grammar, self.cfsm);
    }

    function build_first_sets() {
	using LALR.Generator.build_first_sets;
	self.expect_grammar();

	self.first_sets = build_first_sets(1, self.grammar);
    }

    function build_follows_sets() {
	using LALR.Generator.build_follows_sets;
	self.expect_grammar();
	self.expect_first_sets();

	self.follows_sets = build_follows_sets(1, self.grammar, self.first_sets);
    }

    function build_simple_1_lookahead_sets() {
	using LALR.Generator.build_simple_lookahead_sets;
	self.expect_grammar();
	self.expect_cfsm();
	self.expect_follows_sets();

	build_simple_lookahead_sets(1, self.grammar, self.cfsm, self.follows_sets);
    }

    function is_slr1() {
	self.expect_cfsm();
	for (string state in self.cfsm.states()) {
	    if (self.cfsm.is_state_adequate(state)) {
		continue;
	    }

	    var symbols = {};
	    for (var transition in self.cfsm.transitions_from(state)) {
		for (string symbol in transition.lookahead_set()) {
		    if (exists symbols[symbol]) // The lookahead-sets are not disjoint.
			return 0;
		    symbols[symbol] = 1;
		}
	    }
	}
	return 1;
    }

    function build_lookback_sets() {
	using LALR.Generator.build_lookback_sets;
	self.expect_grammar();
	self.expect_cfsm();
	self.expect_ntt();
	self.expect_p_state_sets();
	self.lookback_sets = build_lookback_sets(self.grammar, self.cfsm, self.ntt, self.p_state_sets);
    }

    function add_lookahead() {
	using LALR.Generator.add_lookahead;
	self.expect_grammar();
	self.expect_cfsm();
	add_lookahead(self.grammar, self.cfsm);
    }

    function add_lookback() {
	using LALR.Generator.add_lookback;
	self.expect_grammar();
	self.expect_cfsm();
	self.expect_ntt();
	self.expect_p_state_sets();
	self.expect_lookback_sets();
	add_lookback(self.grammar, self.cfsm, self.p_state_sets, self.lookback_sets);
    }

    function delete_transitions_under_nonterminals() {
	using LALR.Generator.delete_transitions_under_nonterminals;
	self.expect_grammar();
	self.expect_cfsm();
	delete_transitions_under_nonterminals(self.grammar, self.cfsm);
    }

    function eliminate_epsilon_transitions() {
	using LALR.Generator.eliminate_epsilon_transitions;
	self.expect_cfsm();
	eliminate_epsilon_transitions(self.cfsm);
    }

    function explicitly_push_states() {
	using LALR.Generator.explicitly_push_states;
	self.expect_cfsm();
	explicitly_push_states(self.cfsm);
    }

    function remove_unreachable_states() {
	using LALR.Generator.remove_unreachable_states;
	self.expect_cfsm();
	remove_unreachable_states(self.cfsm);
    }
}

}