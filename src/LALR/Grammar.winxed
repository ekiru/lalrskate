namespace LALR {

class Grammar {
    var rules;
    var start;

    function init [vtable]() {
        self.rules = {};
    }

    function start(string name [optional], int has_name [opt_flag]) {
        if (has_name) {
            self.start = name;
        }
        return self.start;
    }

    function rules() {
        return self.rules;
    }

    function rule(string name) {
        if (exists self.rules[name])
            return self.rules[name];
        else
            return null;
    }

    function add_rule(string name, rhs [slurpy]) {
        if (!exists self.rules[name])
            self.rules[name] = [];
        ${ push self.rules[name], rhs };
    }

    function as_bnf_string() {
        string result = "";
        string start = self.start();
        result += "%start " + start + "\n";
        result += "%%\n";
        for (string name in self.rules()) {
            for (var production in self.rule(name)) {
                result += name + " <-";
                for (string rhs_part in production) {
                    result += " " + rhs_part;
                }
                result += "\n";
            }
        }
        return result;
    }

}

}
