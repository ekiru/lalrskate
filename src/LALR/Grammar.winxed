namespace LALR {

/*
 * The LALR.Grammar class is used to represent grammars.
 *
 * A grammar has a start symbol, which is the name of the symbol from which
 * the generation of a string must begin and at which the parsing of a
 * string must eventually arrive, if successful.
 *
 * A grammar also has a set of productions. A production states that a
 * particular symbol consists of a particular sequence of symbols.
 *
 * A grammar also has, conceptually, two sets of nonterminal and terminal,
 * respectively, symbols. Conventionally, terminal symbols have names
 * composed of all lower-case letters, and nonterminal symbols have
 * names which begin with an uppercase letter.
 */
class Grammar {
    var rules;
    var start;
    var nonterminals;
    var terminals;

    function init [vtable]() {
        self.rules = {};
        self.nonterminals = {}; // Using a Hash as a set.
        self.terminals = {};
    }

    /* g.start() returns the name of the start symbol.
     * g.start(name) sets the start symbol to name.
     */
    function start(string name [optional], int has_name [opt_flag]) {
        if (has_name) {
            self.expect_nonterminal(name);
            self.start = name;
        }
        return self.start;
    }

    function nonterminals() {
        var list = [];
        for (var nonterm in self.nonterminals) {
            ${ push list, nonterm };
        }
        return list;
    }

    function add_nonterminal(string name) {
        self.nonterminals[name] = 1;
    }

    function is_nonterminal(string name) {
        return exists self.nonterminals[name];
    }

    function expect_nonterminal(string name) {
        if (!self.is_nonterminal(name))
            throw "Symbol " + name + " is not a nonterminal in grammar.";
    }

    function terminals() {
        var list = [];
        for (var term in self.terminals) {
            ${ push list, term };
        }
        return list;
    }

    function add_terminal(string name) {
        self.terminals[name] = 1;
    }

    function is_terminal(string name) {
        return exists self.terminals[name];
    }

    function expect_terminal(string name) {
        if (!self.is_terminal(name))
            throw "Symbol " + name + " is not a terminal in grammar.";
    }

    function is_symbol(string name) {
        return self.is_nonterminal(name) || self.is_terminal(name);
    }

    function expect_symbol(string name) {
        if (!self.is_symbol(name))
            throw "Symbol " + name + " is neither a terminal nor a nonterminal in grammar.";
    }

    /* g.rule(name) returns the list of rules for the provided non-terminal
     * The behavior is unspecified if this list is modified.
     */
    function rule(string name) {
        if (exists self.rules[name])
            return self.rules[name];
        else
            return null;
    }

    /* g.rule(name, ...) adds a production stating that the nonterminal name
     * can produce the sequence of nonterminal or terminal names following it.
     * g.rule(name) adds a production stating that the nonterminal name can
     * produce the empty string.
     */
    function add_rule(string name, rhs [slurpy]) {
        self.expect_nonterminal(name);
        if (!exists self.rules[name])
            self.rules[name] = [];
        for (var symbol in rhs) {
            self.expect_symbol(symbol);
        }
        ${ push self.rules[name], rhs };
    }

    /* g.as_bnf_string() produces a string that describes the grammar using
     * a syntax partially inspired by yacc and partially by BNF.
     */
    function as_bnf_string() {
        var printer = new LALR.Grammar.Prettyprint.BNF;
        return printer.prettyprint(self);
    }

}

}
